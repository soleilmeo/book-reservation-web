<?php
if (!defined('ROOT'))
{
    http_response_code(404);
    header("Location: /404");
    exit;
}

class CommentController extends Controller
{

    public $errors = [];

    public function __construct()
    {

        parent::__construct();
    }

    public function postComment() {
        if (Auth::loggedIn()) {
            // Checking valid values
            if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
                if (defined("GLOBAL_DEBUG")) {
                    echo "Not POST";
                }
                return false;
            }

            $currentSession = Auth::getCurrentSession();
            $uid = $currentSession->getSessionUserId();
            $username = $currentSession->getSessionUsername();
            
            if (!$uid) return false;
            if (!$username) return false;

            $target = $this->req["book_comment_section_id"];
            $target = filter_var($target, FILTER_SANITIZE_NUMBER_INT);
            if (is_null($target)) {
                return false;
            }

            $comment = $this->req["book_comment"];
            $comment = filter_var($comment, FILTER_SANITIZE_FULL_SPECIAL_CHARS);

            $sql = "INSERT INTO comments(user_id, username, comment_group_id, comment) VALUES(?,?,?,?)";
            $stmt = $this->conn->prepare($sql);
            $stmt->bind_param("ssss", $uid, $username, $target, $comment);
            $stmt->execute();

            if ($stmt->affected_rows === 1) {
                if (isset($_SERVER["HTTP_REFERER"]) && !is_null($_SERVER["HTTP_REFERER"])) {
                    header('Location: '.$_SERVER["HTTP_REFERER"]."#bookcmtf");
                }
                return true;
            } else {
                if (isset($_SERVER["HTTP_REFERER"]) && !is_null($_SERVER["HTTP_REFERER"])) {
                    header('Location: '.$_SERVER["HTTP_REFERER"]);
                }
                return false;
            }
        }
        return false;
    }

    public function postReply() {
        if (Auth::loggedIn()) {
            // Checking valid values
            if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
                if (defined("GLOBAL_DEBUG")) {
                    echo "Not POST";
                }
                return false;
            }

            $currentSession = Auth::getCurrentSession();
            $uid = $currentSession->getSessionUserId();
            $username = $currentSession->getSessionUsername();
            
            if (!$uid) return false;
            if (!$username) return false;

            $cid = $this->req["book_comment_cid"];
            $cid = filter_var($cid, FILTER_SANITIZE_NUMBER_INT);
            if (is_null($cid)) {
                return false;
            }

            $target = $this->req["book_comment_reply_to"];
            $target = filter_var($target, FILTER_SANITIZE_NUMBER_INT);
            if (is_null($target)) {
                return false;
            }

            $comment = $this->req["book_comment_reply"];
            $comment = filter_var($comment, FILTER_SANITIZE_FULL_SPECIAL_CHARS);

            $sql = "INSERT INTO comments(user_id, username, comment_group_id, comment, reply_to) VALUES(?,?,?,?,?)";
            $stmt = $this->conn->prepare($sql);
            $stmt->bind_param("sssss", $uid, $username, $cid, $comment, $target);
            $stmt->execute();

            if ($stmt->affected_rows === 1) {
                // Will not reload the page, meaning you have to reload it yourself.
                // I do this because I was planning to implement the live comment post feature, but time is running out
                // So if you want to make it auto refresh instead, just remove the click event handler for reply buttons in assets/js/comments.js
                // then implement the actual handler (book/reply) into the forms generated by views/comment.php (inside foreach ($comments as $comment))

                // Generate response
                include "_api/headers/jsonstd.php";
                $response = [
                    "success" => true
                ];
                echo json_encode($response);
                return true;
            } else {
                return false;
            }
        }
        return false;
    }

    public function deleteComment() {
        if (Auth::loggedIn()) {
            // Checking valid values
            if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
                if (defined("GLOBAL_DEBUG")) {
                    echo "Not POST";
                }
            }

            $currentSession = Auth::getCurrentSession();
            $uid = $currentSession->getSessionUserId();
            
            if (!$uid) return false;

            $commentId = $this->req["target_comment_id"];
            $commentId = filter_var($commentId, FILTER_SANITIZE_NUMBER_INT);
            if (is_null($commentId)) {
                return false;
            }

            // Check for permission to delete
            if ($currentSession->getSessionPrivilege() < PrivilegeRank::ADMIN) {
                $sql = "SELECT user_id FROM comments WHERE comment_id = ?;";
                $stmt = $this->conn->prepare($sql);
                $stmt->bind_param("s", $commentId);
                $stmt->execute();
                $result = $stmt->get_result();
                $data = $result->fetch_assoc();

                if (!isset($data["user_id"])) return false;
                if (is_null($data["user_id"])) return false;
                if ($data["user_id"] != $currentSession->getSessionUserId()) return false;
            }

            // If you want to keep the comment for moderation, better store it somewhere else or set comment_group_id to NULL
            $sql = "DELETE FROM comments WHERE comment_id = ?;";
            $stmt = $this->conn->prepare($sql);
            $stmt->bind_param("s", $commentId);
            $stmt->execute();

            if ($stmt->affected_rows === 1) {
                if (isset($_SERVER["HTTP_REFERER"]) && !is_null($_SERVER["HTTP_REFERER"])) {
                    header('Location: '.$_SERVER["HTTP_REFERER"].'#bookcmtf');
                }
                return true;
            }
        }
        if (isset($_SERVER["HTTP_REFERER"]) && !is_null($_SERVER["HTTP_REFERER"])) {
            header('Location: '.$_SERVER["HTTP_REFERER"]);
        }
        return false;
    }
}
?>
